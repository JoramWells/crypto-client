/* !
 * AdminLTE v3.0.5 (https://adminlte.io)
 * Copyright 2014-2020 Colorlib <http://colorlib.com>
 * Licensed under MIT (https://github.com/ColorlibHQ/AdminLTE/blob/master/LICENSE)
 */
!function(t, e) {
'object'==typeof exports&&'undefined'!=typeof module?e(exports):'function'==typeof define&&define.amd?define(['exports'], e):e((t=t||self).adminlte={});
}(this, (function(t) {
  const e=function(t) {
    const e='ControlSidebar'; const i='lte.controlsidebar'; const n=t.fn[e]; const s={COLLAPSED: 'collapsed.lte.controlsidebar', EXPANDED: 'expanded.lte.controlsidebar'}; const o='.control-sidebar'; const a='.control-sidebar-content'; const r='[data-widget="control-sidebar"]'; const l='.main-header'; const c='.main-footer'; const d='control-sidebar-animate'; const h='control-sidebar-open'; const f='control-sidebar-slide-open'; const u='layout-fixed'; const g='layout-navbar-fixed'; const p='layout-sm-navbar-fixed'; const _='layout-md-navbar-fixed'; const m='layout-lg-navbar-fixed'; const v='layout-xl-navbar-fixed'; const C='layout-footer-fixed'; const y='layout-sm-footer-fixed'; const b='layout-md-footer-fixed'; const w='layout-lg-footer-fixed'; const x='layout-xl-footer-fixed'; const E={controlsidebarSlide: !0, scrollbarTheme: 'os-theme-light', scrollbarAutoHide: 'l'}; const A=function() {
      function e(t, e) {
        this._element=t, this._config=e, this._init();
      } const n=e.prototype; return n.collapse=function() {
this._config.controlsidebarSlide?(t('html').addClass(d), t('body').removeClass(f).delay(300).queue((function() {
  t(o).hide(), t('html').removeClass(d), t(this).dequeue();
}))):t('body').removeClass(h); const e=t.Event(s.COLLAPSED); t(this._element).trigger(e);
      }, n.show=function() {
this._config.controlsidebarSlide?(t('html').addClass(d), t(o).show().delay(10).queue((function() {
  t('body').addClass(f).delay(300).queue((function() {
    t('html').removeClass(d), t(this).dequeue();
  })), t(this).dequeue();
}))):t('body').addClass(h); const e=t.Event(s.EXPANDED); t(this._element).trigger(e);
      }, n.toggle=function() {
t('body').hasClass(h)||t('body').hasClass(f)?this.collapse():this.show();
      }, n._init=function() {
        const e=this; this._fixHeight(), this._fixScrollHeight(), t(window).resize((function() {
          e._fixHeight(), e._fixScrollHeight();
        })), t(window).scroll((function() {
          (t('body').hasClass(h)||t('body').hasClass(f))&&e._fixScrollHeight();
        }));
      }, n._fixScrollHeight=function() {
        const e={scroll: t(document).height(), window: t(window).height(), header: t(l).outerHeight(), footer: t(c).outerHeight()}; const i=Math.abs(e.window+t(window).scrollTop()-e.scroll); const n=t(window).scrollTop(); let s=!1; let r=!1; t('body').hasClass(u)&&((t('body').hasClass(g)||t('body').hasClass(p)||t('body').hasClass(_)||t('body').hasClass(m)||t('body').hasClass(v))&&'fixed'===t(l).css('position')&&(s=!0), (t('body').hasClass(C)||t('body').hasClass(y)||t('body').hasClass(b)||t('body').hasClass(w)||t('body').hasClass(x))&&'fixed'===t(c).css('position')&&(r=!0), 0===n&&0===i?(t(o).css('bottom', e.footer), t(o).css('top', e.header), t(o+', '+o+' '+a).css('height', e.window-(e.header+e.footer))):i<=e.footer?!1===r?(t(o).css('bottom', e.footer-i), t(o+', '+o+' '+a).css('height', e.window-(e.footer-i))):t(o).css('bottom', e.footer):n<=e.header?!1===s?(t(o).css('top', e.header-n), t(o+', '+o+' '+a).css('height', e.window-(e.header-n))):t(o).css('top', e.header):!1===s?(t(o).css('top', 0), t(o+', '+o+' '+a).css('height', e.window)):t(o).css('top', e.header));
      }, n._fixHeight=function() {
        const e=t(window).height(); const i=t(l).outerHeight(); const n=t(c).outerHeight(); if (t('body').hasClass(u)) {
          let s=e-i; (t('body').hasClass(C)||t('body').hasClass(y)||t('body').hasClass(b)||t('body').hasClass(w)||t('body').hasClass(x))&&'fixed'===t(c).css('position')&&(s=e-i-n), t(o+' '+a).css('height', s), 'undefined'!=typeof t.fn.overlayScrollbars&&t(o+' '+a).overlayScrollbars({className: this._config.scrollbarTheme, sizeAutoCapable: !0, scrollbars: {autoHide: this._config.scrollbarAutoHide, clickScrolling: !0}});
        }
      }, e._jQueryInterface=function(n) {
        return this.each((function() {
          let s=t(this).data(i); const o=t.extend({}, E, t(this).data()); if (s||(s=new e(this, o), t(this).data(i, s)), 'undefined'===s[n]) throw new Error(n+' is not a function'); s[n]();
        }));
      }, e;
    }(); return t(document).on('click', r, (function(e) {
      e.preventDefault(), A._jQueryInterface.call(t(this), 'toggle');
    })), t.fn[e]=A._jQueryInterface, t.fn[e].Constructor=A, t.fn[e].noConflict=function() {
      return t.fn[e]=n, A._jQueryInterface;
    }, A;
  }(jQuery); const i=function(t) {
    const e='Layout'; const i=t.fn[e]; const n='.main-header'; const s='.main-sidebar'; const o='.main-sidebar .sidebar'; const a='.content-wrapper'; const r='.control-sidebar-content'; const l='[data-widget="control-sidebar"]'; const c='.main-footer'; const d='[data-widget="pushmenu"]'; const h='.login-box'; const f='.register-box'; const u='sidebar-focused'; const g='layout-fixed'; const p='control-sidebar-slide-open'; const _='control-sidebar-open'; const m={scrollbarTheme: 'os-theme-light', scrollbarAutoHide: 'l', panelAutoHeight: !0, loginRegisterAutoHeight: !0}; const v=function() {
      function e(t, e) {
        this._config=e, this._element=t, this._init();
      } const i=e.prototype; return i.fixLayoutHeight=function(e) {
        void 0===e&&(e=null); let i=0; (t('body').hasClass(p)||t('body').hasClass(_)||'control_sidebar'==e)&&(i=t(r).height()); const s={window: t(window).height(), header: 0!==t(n).length?t(n).outerHeight():0, footer: 0!==t(c).length?t(c).outerHeight():0, sidebar: 0!==t(o).length?t(o).height():0, control_sidebar: i}; const l=this._max(s); let d=this._config.panelAutoHeight; !0===d&&(d=0), !1!==d&&(l==s.control_sidebar?t(a).css('min-height', l+d):l==s.window?t(a).css('min-height', l+d-s.header-s.footer):t(a).css('min-height', l+d-s.header), this._isFooterFixed()&&t(a).css('min-height', parseFloat(t(a).css('min-height'))+s.footer)), t('body').hasClass(g)&&(!1!==d&&t(a).css('min-height', l+d-s.header-s.footer), 'undefined'!=typeof t.fn.overlayScrollbars&&t(o).overlayScrollbars({className: this._config.scrollbarTheme, sizeAutoCapable: !0, scrollbars: {autoHide: this._config.scrollbarAutoHide, clickScrolling: !0}}));
      }, i.fixLoginRegisterHeight=function() {
        if (0===t(h+', '+f).length)t('body, html').css('height', 'auto'); else if (0!==t(h+', '+f).length) {
          const e=t(h+', '+f).height(); t('body').css('min-height')!==e&&t('body').css('min-height', e);
        }
      }, i._init=function() {
        const e=this; this.fixLayoutHeight(), !0===this._config.loginRegisterAutoHeight?this.fixLoginRegisterHeight():Number.isInteger(this._config.loginRegisterAutoHeight)&&setInterval(this.fixLoginRegisterHeight, this._config.loginRegisterAutoHeight), t(o).on('collapsed.lte.treeview expanded.lte.treeview', (function() {
          e.fixLayoutHeight();
        })), t(d).on('collapsed.lte.pushmenu shown.lte.pushmenu', (function() {
          e.fixLayoutHeight();
        })), t(l).on('collapsed.lte.controlsidebar', (function() {
          e.fixLayoutHeight();
        })).on('expanded.lte.controlsidebar', (function() {
          e.fixLayoutHeight('control_sidebar');
        })), t(window).resize((function() {
          e.fixLayoutHeight();
        })), setTimeout((function() {
          t('body.hold-transition').removeClass('hold-transition');
        }), 50);
      }, i._max=function(t) {
        let e=0; return Object.keys(t).forEach((function(i) {
          t[i]>e&&(e=t[i]);
        })), e;
      }, i._isFooterFixed=function() {
        return 'fixed'===t('.main-footer').css('position');
      }, e._jQueryInterface=function(i) {
        return void 0===i&&(i=''), this.each((function() {
          let n=t(this).data('lte.layout'); const s=t.extend({}, m, t(this).data()); n||(n=new e(t(this), s), t(this).data('lte.layout', n)), 'init'===i||''===i?n._init():'fixLayoutHeight'!==i&&'fixLoginRegisterHeight'!==i||n[i]();
        }));
      }, e;
    }(); return t(window).on('load', (function() {
      v._jQueryInterface.call(t('body'));
    })), t(o+' a').on('focusin', (function() {
      t(s).addClass(u);
    })), t(o+' a').on('focusout', (function() {
      t(s).removeClass(u);
    })), t.fn[e]=v._jQueryInterface, t.fn[e].Constructor=v, t.fn[e].noConflict=function() {
      return t.fn[e]=i, v._jQueryInterface;
    }, v;
  }(jQuery); const n=function(t) {
    const e='PushMenu'; const i='.lte.pushmenu'; const n=t.fn[e]; const s={COLLAPSED: 'collapsed'+i, SHOWN: 'shown'+i}; const o={autoCollapseSize: 992, enableRemember: !1, noTransitionAfterReload: !0}; const a='[data-widget="pushmenu"]'; const r='body'; const l='#sidebar-overlay'; const c='.wrapper'; const d='sidebar-collapse'; const h='sidebar-open'; const f='sidebar-closed'; const u=function() {
      function e(e, i) {
        this._element=e, this._options=t.extend({}, o, i), t(l).length||this._addOverlay(), this._init();
      } const n=e.prototype; return n.expand=function() {
        this._options.autoCollapseSize&&t(window).width()<=this._options.autoCollapseSize&&t(r).addClass(h), t(r).removeClass(d).removeClass(f), this._options.enableRemember&&localStorage.setItem('remember'+i, h); const e=t.Event(s.SHOWN); t(this._element).trigger(e);
      }, n.collapse=function() {
        this._options.autoCollapseSize&&t(window).width()<=this._options.autoCollapseSize&&t(r).removeClass(h).addClass(f), t(r).addClass(d), this._options.enableRemember&&localStorage.setItem('remember'+i, d); const e=t.Event(s.COLLAPSED); t(this._element).trigger(e);
      }, n.toggle=function() {
t(r).hasClass(d)?this.expand():this.collapse();
      }, n.autoCollapse=function(e) {
        void 0===e&&(e=!1), this._options.autoCollapseSize&&(t(window).width()<=this._options.autoCollapseSize?t(r).hasClass(h)||this.collapse():1==e&&(t(r).hasClass(h)?t(r).removeClass(h):t(r).hasClass(f)&&this.expand()));
      }, n.remember=function() {
        this._options.enableRemember&&(localStorage.getItem('remember'+i)==d?this._options.noTransitionAfterReload?t('body').addClass('hold-transition').addClass(d).delay(50).queue((function() {
          t(this).removeClass('hold-transition'), t(this).dequeue();
        })):t('body').addClass(d):this._options.noTransitionAfterReload?t('body').addClass('hold-transition').removeClass(d).delay(50).queue((function() {
          t(this).removeClass('hold-transition'), t(this).dequeue();
        })):t('body').removeClass(d));
      }, n._init=function() {
        const e=this; this.remember(), this.autoCollapse(), t(window).resize((function() {
          e.autoCollapse(!0);
        }));
      }, n._addOverlay=function() {
        const e=this; const i=t('<div />', {id: 'sidebar-overlay'}); i.on('click', (function() {
          e.collapse();
        })), t(c).append(i);
      }, e._jQueryInterface=function(i) {
        return this.each((function() {
          let n=t(this).data('lte.pushmenu'); const s=t.extend({}, o, t(this).data()); n||(n=new e(this, s), t(this).data('lte.pushmenu', n)), 'string'==typeof i&&i.match(/collapse|expand|toggle/)&&n[i]();
        }));
      }, e;
    }(); return t(document).on('click', a, (function(e) {
      e.preventDefault(); let i=e.currentTarget; 'pushmenu'!==t(i).data('widget')&&(i=t(i).closest(a)), u._jQueryInterface.call(t(i), 'toggle');
    })), t(window).on('load', (function() {
      u._jQueryInterface.call(t(a));
    })), t.fn[e]=u._jQueryInterface, t.fn[e].Constructor=u, t.fn[e].noConflict=function() {
      return t.fn[e]=n, u._jQueryInterface;
    }, u;
  }(jQuery); const s=function(t) {
    const e='Treeview'; const i=t.fn[e]; const n={SELECTED: 'selected.lte.treeview', EXPANDED: 'expanded.lte.treeview', COLLAPSED: 'collapsed.lte.treeview', LOAD_DATA_API: 'load.lte.treeview'}; const s='.nav-item'; const o='.nav-treeview'; const a='.menu-open'; const r='[data-widget="treeview"]'; const l='menu-open'; const c='sidebar-collapse'; const d={trigger: r+' '+'.nav-link', animationSpeed: 300, accordion: !0, expandSidebar: !1, sidebarButtonSelector: '[data-widget="pushmenu"]'}; const h=function() {
      function e(t, e) {
        this._config=e, this._element=t;
      } const i=e.prototype; return i.init=function() {
        this._setupListeners();
      }, i.expand=function(e, i) {
        const s=this; const r=t.Event(n.EXPANDED); if (this._config.accordion) {
          const c=i.siblings(a).first(); const d=c.find(o).first(); this.collapse(d, c);
        }e.stop().slideDown(this._config.animationSpeed, (function() {
          i.addClass(l), t(s._element).trigger(r);
        })), this._config.expandSidebar&&this._expandSidebar();
      }, i.collapse=function(e, i) {
        const s=this; const r=t.Event(n.COLLAPSED); e.stop().slideUp(this._config.animationSpeed, (function() {
          i.removeClass(l), t(s._element).trigger(r), e.find(a+' > '+o).slideUp(), e.find(a).removeClass(l);
        }));
      }, i.toggle=function(e) {
        const i=t(e.currentTarget); const n=i.parent(); let a=n.find('> '+o); if (a.is(o)||(n.is(s)||(a=n.parent().find('> '+o)), a.is(o))) {
          e.preventDefault(); const r=i.parents(s).first(); r.hasClass(l)?this.collapse(t(a), r):this.expand(t(a), r);
        }
      }, i._setupListeners=function() {
        const e=this; t(document).on('click', this._config.trigger, (function(t) {
          e.toggle(t);
        }));
      }, i._expandSidebar=function() {
        t('body').hasClass(c)&&t(this._config.sidebarButtonSelector).PushMenu('expand');
      }, e._jQueryInterface=function(i) {
        return this.each((function() {
          let n=t(this).data('lte.treeview'); const s=t.extend({}, d, t(this).data()); n||(n=new e(t(this), s), t(this).data('lte.treeview', n)), 'init'===i&&n[i]();
        }));
      }, e;
    }(); return t(window).on(n.LOAD_DATA_API, (function() {
      t(r).each((function() {
        h._jQueryInterface.call(t(this), 'init');
      }));
    })), t.fn[e]=h._jQueryInterface, t.fn[e].Constructor=h, t.fn[e].noConflict=function() {
      return t.fn[e]=i, h._jQueryInterface;
    }, h;
  }(jQuery); const o=function(t) {
    const e='DirectChat'; const i=t.fn[e]; const n='toggled{EVENT_KEY}'; const s='[data-widget="chat-pane-toggle"]'; const o='.direct-chat'; const a='direct-chat-contacts-open'; const r=function() {
      function e(t, e) {
        this._element=t;
      } return e.prototype.toggle=function() {
        t(this._element).parents(o).first().toggleClass(a); const e=t.Event(n); t(this._element).trigger(e);
      }, e._jQueryInterface=function(i) {
        return this.each((function() {
          let n=t(this).data('lte.directchat'); n||(n=new e(t(this)), t(this).data('lte.directchat', n)), n[i]();
        }));
      }, e;
    }(); return t(document).on('click', s, (function(e) {
      e&&e.preventDefault(), r._jQueryInterface.call(t(this), 'toggle');
    })), t.fn[e]=r._jQueryInterface, t.fn[e].Constructor=r, t.fn[e].noConflict=function() {
      return t.fn[e]=i, r._jQueryInterface;
    }, r;
  }(jQuery); const a=function(t) {
    const e='TodoList'; const i=t.fn[e]; const n='[data-widget="todo-list"]'; const s='done'; const o={onCheck: function(t) {
      return t;
    }, onUnCheck: function(t) {
      return t;
    }}; const a=function() {
      function e(t, e) {
        this._config=e, this._element=t, this._init();
      } const i=e.prototype; return i.toggle=function(e) {
        e.parents('li').toggleClass(s), t(e).prop('checked')?this.check(e):this.unCheck(t(e));
      }, i.check=function(t) {
        this._config.onCheck.call(t);
      }, i.unCheck=function(t) {
        this._config.onUnCheck.call(t);
      }, i._init=function() {
        const e=this; t(n).find('input:checkbox:checked').parents('li').toggleClass(s), t(n).on('change', 'input:checkbox', (function(i) {
          e.toggle(t(i.target));
        }));
      }, e._jQueryInterface=function(i) {
        return this.each((function() {
          let n=t(this).data('lte.todolist'); const s=t.extend({}, o, t(this).data()); n||(n=new e(t(this), s), t(this).data('lte.todolist', n)), 'init'===i&&n[i]();
        }));
      }, e;
    }(); return t(window).on('load', (function() {
      a._jQueryInterface.call(t(n));
    })), t.fn[e]=a._jQueryInterface, t.fn[e].Constructor=a, t.fn[e].noConflict=function() {
      return t.fn[e]=i, a._jQueryInterface;
    }, a;
  }(jQuery); const r=function(t) {
    const e='CardWidget'; const i='.lte.cardwidget'; const n=t.fn[e]; const s={EXPANDED: 'expanded'+i, COLLAPSED: 'collapsed'+i, MAXIMIZED: 'maximized'+i, MINIMIZED: 'minimized'+i, REMOVED: 'removed'+i}; const o='card'; const a='collapsed-card'; const r='collapsing-card'; const l='expanding-card'; const c='was-collapsed'; const d='maximized-card'; const h={DATA_REMOVE: '[data-card-widget="remove"]', DATA_COLLAPSE: '[data-card-widget="collapse"]', DATA_MAXIMIZE: '[data-card-widget="maximize"]', CARD: '.'+o, CARD_HEADER: '.card-header', CARD_BODY: '.card-body', CARD_FOOTER: '.card-footer', COLLAPSED: '.'+a}; const f={animationSpeed: 'normal', collapseTrigger: h.DATA_COLLAPSE, removeTrigger: h.DATA_REMOVE, maximizeTrigger: h.DATA_MAXIMIZE, collapseIcon: 'fa-minus', expandIcon: 'fa-plus', maximizeIcon: 'fa-expand', minimizeIcon: 'fa-compress'}; const u=function() {
      function e(e, i) {
        this._element=e, this._parent=e.parents(h.CARD).first(), e.hasClass(o)&&(this._parent=e), this._settings=t.extend({}, f, i);
      } const i=e.prototype; return i.collapse=function() {
        const e=this; this._parent.addClass(r).children(h.CARD_BODY+', '+h.CARD_FOOTER).slideUp(this._settings.animationSpeed, (function() {
          e._parent.addClass(a).removeClass(r);
        })), this._parent.find('> '+h.CARD_HEADER+' '+this._settings.collapseTrigger+' .'+this._settings.collapseIcon).addClass(this._settings.expandIcon).removeClass(this._settings.collapseIcon); const i=t.Event(s.COLLAPSED); this._element.trigger(i, this._parent);
      }, i.expand=function() {
        const e=this; this._parent.addClass(l).children(h.CARD_BODY+', '+h.CARD_FOOTER).slideDown(this._settings.animationSpeed, (function() {
          e._parent.removeClass(a).removeClass(l);
        })), this._parent.find('> '+h.CARD_HEADER+' '+this._settings.collapseTrigger+' .'+this._settings.expandIcon).addClass(this._settings.collapseIcon).removeClass(this._settings.expandIcon); const i=t.Event(s.EXPANDED); this._element.trigger(i, this._parent);
      }, i.remove=function() {
        this._parent.slideUp(); const e=t.Event(s.REMOVED); this._element.trigger(e, this._parent);
      }, i.toggle=function() {
this._parent.hasClass(a)?this.expand():this.collapse();
      }, i.maximize=function() {
        this._parent.find(this._settings.maximizeTrigger+' .'+this._settings.maximizeIcon).addClass(this._settings.minimizeIcon).removeClass(this._settings.maximizeIcon), this._parent.css({height: this._parent.height(), width: this._parent.width(), transition: 'all .15s'}).delay(150).queue((function() {
          t(this).addClass(d), t('html').addClass(d), t(this).hasClass(a)&&t(this).addClass(c), t(this).dequeue();
        })); const e=t.Event(s.MAXIMIZED); this._element.trigger(e, this._parent);
      }, i.minimize=function() {
        this._parent.find(this._settings.maximizeTrigger+' .'+this._settings.minimizeIcon).addClass(this._settings.maximizeIcon).removeClass(this._settings.minimizeIcon), this._parent.css('cssText', 'height:'+this._parent[0].style.height+' !important;width:'+this._parent[0].style.width+' !important; transition: all .15s;').delay(10).queue((function() {
          t(this).removeClass(d), t('html').removeClass(d), t(this).css({height: 'inherit', width: 'inherit'}), t(this).hasClass(c)&&t(this).removeClass(c), t(this).dequeue();
        })); const e=t.Event(s.MINIMIZED); this._element.trigger(e, this._parent);
      }, i.toggleMaximize=function() {
this._parent.hasClass(d)?this.minimize():this.maximize();
      }, i._init=function(e) {
        const i=this; this._parent=e, t(this).find(this._settings.collapseTrigger).click((function() {
          i.toggle();
        })), t(this).find(this._settings.maximizeTrigger).click((function() {
          i.toggleMaximize();
        })), t(this).find(this._settings.removeTrigger).click((function() {
          i.remove();
        }));
      }, e._jQueryInterface=function(i) {
        let n=t(this).data('lte.cardwidget'); const s=t.extend({}, f, t(this).data()); n||(n=new e(t(this), s), t(this).data('lte.cardwidget', 'string'==typeof i?n:i)), 'string'==typeof i&&i.match(/collapse|expand|remove|toggle|maximize|minimize|toggleMaximize/)?n[i]():'object'==typeof i&&n._init(t(this));
      }, e;
    }(); return t(document).on('click', h.DATA_COLLAPSE, (function(e) {
      e&&e.preventDefault(), u._jQueryInterface.call(t(this), 'toggle');
    })), t(document).on('click', h.DATA_REMOVE, (function(e) {
      e&&e.preventDefault(), u._jQueryInterface.call(t(this), 'remove');
    })), t(document).on('click', h.DATA_MAXIMIZE, (function(e) {
      e&&e.preventDefault(), u._jQueryInterface.call(t(this), 'toggleMaximize');
    })), t.fn[e]=u._jQueryInterface, t.fn[e].Constructor=u, t.fn[e].noConflict=function() {
      return t.fn[e]=n, u._jQueryInterface;
    }, u;
  }(jQuery); const l=function(t) {
    const e='CardRefresh'; const i=t.fn[e]; const n={LOADED: 'loaded.lte.cardrefresh', OVERLAY_ADDED: 'overlay.added.lte.cardrefresh', OVERLAY_REMOVED: 'overlay.removed.lte.cardrefresh'}; const s='card'; const o={CARD: '.'+s, DATA_REFRESH: '[data-card-widget="card-refresh"]'}; const a={source: '', sourceSelector: '', params: {}, trigger: o.DATA_REFRESH, content: '.card-body', loadInContent: !0, loadOnInit: !0, responseType: '', overlayTemplate: '<div class="overlay"><i class="fas fa-2x fa-sync-alt fa-spin"></i></div>', onLoadStart: function() {}, onLoadDone: function(t) {
      return t;
    }}; const r=function() {
      function e(e, i) {
        if (this._element=e, this._parent=e.parents(o.CARD).first(), this._settings=t.extend({}, a, i), this._overlay=t(this._settings.overlayTemplate), e.hasClass(s)&&(this._parent=e), ''===this._settings.source) throw new Error('Source url was not defined. Please specify a url in your CardRefresh source option.');
      } const i=e.prototype; return i.load=function() {
        this._addOverlay(), this._settings.onLoadStart.call(t(this)), t.get(this._settings.source, this._settings.params, function(e) {
          this._settings.loadInContent&&(''!=this._settings.sourceSelector&&(e=t(e).find(this._settings.sourceSelector).html()), this._parent.find(this._settings.content).html(e)), this._settings.onLoadDone.call(t(this), e), this._removeOverlay();
        }.bind(this), ''!==this._settings.responseType&&this._settings.responseType); const e=t.Event(n.LOADED); t(this._element).trigger(e);
      }, i._addOverlay=function() {
        this._parent.append(this._overlay); const e=t.Event(n.OVERLAY_ADDED); t(this._element).trigger(e);
      }, i._removeOverlay=function() {
        this._parent.find(this._overlay).remove(); const e=t.Event(n.OVERLAY_REMOVED); t(this._element).trigger(e);
      }, i._init=function(e) {
        const i=this; t(this).find(this._settings.trigger).on('click', (function() {
          i.load();
        })), this._settings.loadOnInit&&this.load();
      }, e._jQueryInterface=function(i) {
        let n=t(this).data('lte.cardrefresh'); const s=t.extend({}, a, t(this).data()); n||(n=new e(t(this), s), t(this).data('lte.cardrefresh', 'string'==typeof i?n:i)), 'string'==typeof i&&i.match(/load/)?n[i]():n._init(t(this));
      }, e;
    }(); return t(document).on('click', o.DATA_REFRESH, (function(e) {
      e&&e.preventDefault(), r._jQueryInterface.call(t(this), 'load');
    })), t(document).ready((function() {
      t(o.DATA_REFRESH).each((function() {
        r._jQueryInterface.call(t(this));
      }));
    })), t.fn[e]=r._jQueryInterface, t.fn[e].Constructor=r, t.fn[e].noConflict=function() {
      return t.fn[e]=i, r._jQueryInterface;
    }, r;
  }(jQuery); const c=function(t) {
    const e='Dropdown'; const i=t.fn[e]; const n='.navbar'; const s='.dropdown-menu'; const o='.dropdown-menu.show'; const a='[data-toggle="dropdown"]'; const r='dropdown-menu-right'; const l={}; const c=function() {
      function e(t, e) {
        this._config=e, this._element=t;
      } const i=e.prototype; return i.toggleSubmenu=function() {
        this._element.siblings().show().toggleClass('show'), this._element.next().hasClass('show')||this._element.parents('.dropdown-menu').first().find('.show').removeClass('show').hide(), this._element.parents('li.nav-item.dropdown.show').on('hidden.bs.dropdown', (function(e) {
          t('.dropdown-submenu .show').removeClass('show').hide();
        }));
      }, i.fixPosition=function() {
        const e=t(o); if (0!==e.length) {
e.hasClass(r)?(e.css('left', 'inherit'), e.css('right', 0)):(e.css('left', 0), e.css('right', 'inherit')); const i=e.offset(); const n=e.width(); const s=t(window).width()-i.left; i.left<0?(e.css('left', 'inherit'), e.css('right', i.left-5)):s<n&&(e.css('left', 'inherit'), e.css('right', 0));
        }
      }, e._jQueryInterface=function(i) {
        return this.each((function() {
          let n=t(this).data('lte.dropdown'); const s=t.extend({}, l, t(this).data()); n||(n=new e(t(this), s), t(this).data('lte.dropdown', n)), 'toggleSubmenu'!==i&&'fixPosition'!=i||n[i]();
        }));
      }, e;
    }(); return t(s+' '+a).on('click', (function(e) {
      e.preventDefault(), e.stopPropagation(), c._jQueryInterface.call(t(this), 'toggleSubmenu');
    })), t(n+' '+a).on('click', (function(e) {
      e.preventDefault(), setTimeout((function() {
        c._jQueryInterface.call(t(this), 'fixPosition');
      }), 1);
    })), t.fn[e]=c._jQueryInterface, t.fn[e].Constructor=c, t.fn[e].noConflict=function() {
      return t.fn[e]=i, c._jQueryInterface;
    }, c;
  }(jQuery); const d=function(t) {
    const e='Toasts'; const i=t.fn[e]; const n={INIT: 'init.lte.toasts', CREATED: 'created.lte.toasts', REMOVED: 'removed.lte.toasts'}; const s='#toastsContainerTopRight'; const o='#toastsContainerTopLeft'; const a='#toastsContainerBottomRight'; const r='#toastsContainerBottomLeft'; const l='toasts-top-right'; const c='toasts-top-left'; const d='toasts-bottom-right'; const h='toasts-bottom-left'; const f='topRight'; const u='topLeft'; const g='bottomRight'; const p='bottomLeft'; const _={position: f, fixed: !0, autohide: !1, autoremove: !0, delay: 1e3, fade: !0, icon: null, image: null, imageAlt: null, imageHeight: '25px', title: null, subtitle: null, close: !0, body: null, class: null}; const m=function() {
      function e(e, i) {
        this._config=i, this._prepareContainer(); const s=t.Event(n.INIT); t('body').trigger(s);
      } const i=e.prototype; return i.create=function() {
        const e=t('<div class="toast" role="alert" aria-live="assertive" aria-atomic="true"/>'); e.data('autohide', this._config.autohide), e.data('animation', this._config.fade), this._config.class&&e.addClass(this._config.class), this._config.delay&&500!=this._config.delay&&e.data('delay', this._config.delay); const i=t('<div class="toast-header">'); if (null!=this._config.image) {
          const s=t('<img />').addClass('rounded mr-2').attr('src', this._config.image).attr('alt', this._config.imageAlt); null!=this._config.imageHeight&&s.height(this._config.imageHeight).width('auto'), i.append(s);
        } if (null!=this._config.icon&&i.append(t('<i />').addClass('mr-2').addClass(this._config.icon)), null!=this._config.title&&i.append(t('<strong />').addClass('mr-auto').html(this._config.title)), null!=this._config.subtitle&&i.append(t('<small />').html(this._config.subtitle)), 1==this._config.close) {
          const o=t('<button data-dismiss="toast" />').attr('type', 'button').addClass('ml-2 mb-1 close').attr('aria-label', 'Close').append('<span aria-hidden="true">&times;</span>'); null==this._config.title&&o.toggleClass('ml-2 ml-auto'), i.append(o);
        }e.append(i), null!=this._config.body&&e.append(t('<div class="toast-body" />').html(this._config.body)), t(this._getContainerId()).prepend(e); const a=t.Event(n.CREATED); t('body').trigger(a), e.toast('show'), this._config.autoremove&&e.on('hidden.bs.toast', (function() {
          t(this).delay(200).remove(); const e=t.Event(n.REMOVED); t('body').trigger(e);
        }));
      }, i._getContainerId=function() {
        return this._config.position==f?s:this._config.position==u?o:this._config.position==g?a:this._config.position==p?r:void 0;
      }, i._prepareContainer=function() {
        if (0===t(this._getContainerId()).length) {
          const e=t('<div />').attr('id', this._getContainerId().replace('#', '')); this._config.position==f?e.addClass(l):this._config.position==u?e.addClass(c):this._config.position==g?e.addClass(d):this._config.position==p&&e.addClass(h), t('body').append(e);
        } this._config.fixed?t(this._getContainerId()).addClass('fixed'):t(this._getContainerId()).removeClass('fixed');
      }, e._jQueryInterface=function(i, n) {
        return this.each((function() {
          const s=t.extend({}, _, n); const o=new e(t(this), s); 'create'===i&&o[i]();
        }));
      }, e;
    }(); return t.fn[e]=m._jQueryInterface, t.fn[e].Constructor=m, t.fn[e].noConflict=function() {
      return t.fn[e]=i, m._jQueryInterface;
    }, m;
  }(jQuery); t.CardRefresh=l, t.CardWidget=r, t.ControlSidebar=e, t.DirectChat=o, t.Dropdown=c, t.Layout=i, t.PushMenu=n, t.Toasts=d, t.TodoList=a, t.Treeview=s, Object.defineProperty(t, '__esModule', {value: !0});
}));
// # sourceMappingURL=adminlte.min.js.map
